'use client';

import React, { useEffect, useState } from 'react';

interface DirectionToStationProps {
  stationLat: number;
  stationLon: number;
}

const DirectionToStation: React.FC<DirectionToStationProps> = ({ stationLat, stationLon }) => {
  const [distanceKm, setDistanceKm] = useState<number | null>(null);
  const [bearing, setBearing] = useState<number | null>(null);

  useEffect(() => {
    const updateLocationData = () => {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude: userLat, longitude: userLon } = position.coords;
          const distance = getDistanceFromLatLonInKm(userLat, userLon, stationLat, stationLon);
          const bearingDeg = calculateBearing(userLat, userLon, stationLat, stationLon);
          setDistanceKm(distance);
          setBearing(bearingDeg);
        },
        (error) => {
          console.error("Geolocation error:", error);
        },
        { enableHighAccuracy: true }
      );
    };

    updateLocationData();
    const intervalId = setInterval(updateLocationData, 5000); // Update every 5 seconds
    return () => clearInterval(intervalId);
  }, [stationLat, stationLon]);

  if (distanceKm === null || bearing === null) return null;

  return (
    <div style={{ marginTop: '2rem', textAlign: 'center' }}>
      <h3>Distance & Direction</h3>
      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
        <div
          style={{
            fontSize: '2rem',
            transform: `rotate(${bearing}deg)`,
            transition: 'transform 0.3s ease-in-out'
          }}
        >
          â†‘
        </div>
        <p>{distanceKm.toFixed(2)} km away</p>
      </div>
    </div>
  );
};

export default DirectionToStation;

// Helper functions
function getDistanceFromLatLonInKm(lat1: number, lon1: number, lat2: number, lon2: number): number {
  const R = 6371;
  const dLat = deg2rad(lat2 - lat1);
  const dLon = deg2rad(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
    Math.sin(dLon / 2) * Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

function deg2rad(deg: number): number {
  return deg * (Math.PI / 180);
}

function calculateBearing(lat1: number, lon1: number, lat2: number, lon2: number): number {
  const dLon = deg2rad(lon2 - lon1);
  const y = Math.sin(dLon) * Math.cos(deg2rad(lat2));
  const x =
    Math.cos(deg2rad(lat1)) * Math.sin(deg2rad(lat2)) -
    Math.sin(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.cos(dLon);
  const bearing = Math.atan2(y, x);
  return (rad2deg(bearing) + 360) % 360;
}

function rad2deg(rad: number): number {
  return rad * (180 / Math.PI);
}
